# -*- coding: utf-8 -*-
"""Desafio.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PR1FAco9QtHyrkI8PbFEFqPMEv827I0Z

<center><h1><bold>Grupo JurassicShark </bold></h1></center>
<center><img src="https://drive.google.com/uc?export=download&id=1ehyX9nlI2GEw_ZCW_x_hB6OUXeY9pgDa"> </center>

##Setup Inicial
"""

#Fazendo os imports usados no notebook
import pandas as pd
import numpy as np

#Lendo a base de dados a partir do Google Drive
url = 'https://drive.google.com/uc?export=download&id=1ATa30oSddGcbpUB614gm8RUw7L0RLy8h'
base = pd.read_csv(url)

#Vídeos bonitos
#https://www.pexels.com/pt-br/procurar/videos/rio%20de%20janeiro/

"""##O Perfil 3
#####Uma pessoa solteira de aproximadamente 45 anos
#####Ponto turístico obrigatório pré-definido: **Jardim Botânico do Rio de Janeiro**
#####Esta pessoa está planejando a viagem durante muito tempo e está muito ansiosa para fazer de tudo no Rio de Janeiro. Durante a viagem, ela gostaria de conhecer o Jardim Botânico, tendo em vista que é apaixonada por flores. 
#####Além disso, ela também é muito interessada em trilhas e ecoturismo. Vale ressaltarque a pessoa é fumante e ainda precisará trabalhar por um dos dias na viagem, portanto necessita de internet.
Ela planejou um **gasto de até 1000 reais** durante os 4 dias de viagem (acomodação e taxas + entrada nos pontos turísticos + transporte entre acomodação e pontos turísticos). Ela utiliza apenas o transporte 
individual (táxi ou aplicativo) com um preço fixo por quilômetro.
"""



"""##O Pacote : Ecoturismo no melhor da cidade
>O primeiro passo foi decidir o roteiro que gostaríamos de oferecer ao cliente, levamos em consideração a sua paixão por ecoturismo e interesse por trilhas,  escolhendo uma abordagem mais ecológica dos cartões postais mais famosos da cidade

#####**Dia 1**
#####Manhã: Jardim botânico 
#####Transporte acomodações >  Jardim botânico
#####Transporte Jardim botânico >  Marina da glória
#####Passeio de barco na Baia de Guanabara 
#####Transporte Marina da glória > Acomodações
#####</p>
#####**Dia 2**
#####Manhã: Parque Lage - Café da manhã 
#####Transporte acomodações > Parque Lage
#####Transporte Parque Lage > Cosme velho
#####Tarde: Cristo redentor usando trem do Corcovado 88,00
#####Transporte Cosme velho > Acmodações
#####**Dia 3**
#####Dia de trabalho home Office, solicitado pelo cliente
#####**Dia 4**
#####Manhã: Trilha do morro da Urca  
#####Transporte Acomodações > Pista Claudio Coutinho
#####Visita ao Pão de açúcar 114,00 
#####Transporte Pão de açucar > Acomodações
#####Noite: La Fiorentina (Restaurante no Leme)
#####Transporte Acomodações > ida e volta

###Custos de ingressos no roteiro

Local | Valor em reais
---------|---------
Jardim botânico |10,00
Passeio de barco na Baia de Guanabara |60,00
Cristo redentor | 88,00
Visita ao Pão de açúcar| 114,00 
La Fiorentina| 35,00
|
**Total** | **307,00**

##Ecolhendo os Bairros
Aqui escolhemos possíveis bairros de acordo com a proximidade com os pontos turísticos
<img src='https://drive.google.com/uc?export=download&id=1vzIjOZmZ4v6hEGVtcZW27EDlKPATWbUx'>
"""

#Esse arquivo foi gerado para facilitar a busca pelos bairros no Google Maps
bairros = list(base['bairro'].unique())
quantidade_locais = list(base['bairro'].value_counts())
lista_bairros = zip(bairros, quantidade_locais)

f = open("bairros.csv", "w")
for item in lista_bairros:
  f.write(str(item)+"\n")

f.close()

"""####Chegamos a conclusão de que os possíveis bairros são:
Copacabana, Ipanema, Botafogo, Leblon, Humaitá, Lagoa, Gávea e Jardim Botânico

O próximo passo é calcular os custos com transporte
"""

nomes = ["Copacabana", "Ipanema", "Botafogo", "Leblon", "Humaitá", "Lagoa", "Gávea", "Jardim Botânico"]
count = 0

copacabana = {"Jardim botânico":5.1*3, "Marina da glória":7*3, "Lage":5*3, "Cosme":6*3, "Pista Claudio Coutinho":5.2*3, "Pão": 6.1*3, "Fiorentina":2.5*6}
ipanema = {"Jardim botânico":4.9*3, "Marina da glória":10.4*3, "Lage":5.2*3, "Cosme":7.5*3, "Pista Claudio Coutinho":6.7*3, "Pão":9.7*3, "Fiorentina":4.9*6}
botafogo = {"Jardim botânico":6.2*3, "Marina da glória":5*3, "Lage":3.8*3, "Cosme":4.8 *3, "Pista Claudio Coutinho":2.5*3, "Pão":5.7*3, "Fiorentina":3.7*6}
leblon = {"Jardim botânico":2.2*3, "Marina da glória":12.2*3, "Lage":3.2*3, "Cosme":7.2*3, "Pista Claudio Coutinho":8.7*3, "Pão":11.4*3, "Fiorentina":7.7*6}
humaita = {"Jardim botânico":3*3, "Marina da glória":7.3*3, "Lage":1.9*3, "Cosme":3.9*3, "Pista Claudio Coutinho":4.8*3, "Pão":6.2*3, "Fiorentina":5.7*6}
lagoa = {"Jardim botânico":2*3, "Marina da glória":8.7*3, "Lage":1.2*3, "Cosme":5.1*3, "Pista Claudio Coutinho":5.2*3, "Pão":7.1*3, "Fiorentina":5.9*6}
gavea = {"Jardim botânico":2.5*3, "Marina da glória":11.5*3, "Lage":2.5*3, "Cosme":8.1*3, "Pista Claudio Coutinho":8.3*3, "Pão":9.5*3, "Fiorentina":8.8*6}
jardim = {"Jardim botânico":1.3*3, "Marina da glória":10.4*3, "Lage":1.4*3, "Cosme":5.7*3, "Pista Claudio Coutinho":6.9*3, "Pão":8.8*3, "Fiorentina":8.7*6}

direto_do_ponto_turístico = {"JardimxMarina":10.4*3, "LagexCosme":5.2*3} 
 
valor_bairros = [copacabana, ipanema, botafogo, leblon, humaita, lagoa, gavea, jardim]
lista_valores = []

for item in valor_bairros:
  soma = "{:.2f}".format(sum(item.values()) + sum(direto_do_ponto_turístico.values()))
  print(f"{nomes[count]}: {soma}")
  lista_valores.append(float(soma))
  count+=1

media = "{:.2f}".format(sum(lista_valores)/len(nomes))
print("\nA média entre os bairros é:", media)

"""Temos então do mais barato para o mais caro:

Bairro| Total com transporte
-|-
Botafogo| 153,00
Humaitá| 162,30
Lagoa| 170,10
Copacabana| 180,60
Jardim Botânico| 202,50
Ipanema| 209,40
Gávea|226.80
Leblon| 227,70
|
**Média**|**189,60**

##Em busca da acomodação perfeita

Agora que sabemos que vamos gastar em média 186,51 em transporte e mais 307,00 em ingressos, sabemos que nosso custo inicial é de aproximadamente **R$461,51**

Enão  colocando entre mínimo e máximo, mais ingressos, sabemos que temos entre **466 e 535 reais** para encontrar a acomodação perfeira

## Entendo a nossa base de dados

Exibindo nossas séries (colunas) em nossa base de dados, e quais dessas colunas possuem valores incompletos
"""

base.isnull().sum()

"""##Limpando alguns valores da base
Filtrando locais que não possuem a informação de Bairro ou Avaliação Geral

"""

sem_bairro_av = base.dropna(subset=['bairro', 'avaliação_geral'])

print("Entradas antes da limpeza " + str(base.shape[0]))
print("Entradas depois da limpeza " + str(sem_bairro_av.shape[0]) +"\n")

bs_df = pd.DataFrame(columns=["Nome","Entradas"], data={"Nome": ["Depois","Antes"] ,"Entradas":[sem_bairro_av.shape[0],base.shape[0]] })
bs_df.set_index("Nome").plot.barh()

"""## Filtrando hotéis que se adequam ao número de noites de estadia"""

#excluindo do dataframe os hoteis que exigem um número de noites mínimas maior que 4, 
base_NoitesMinimas = sem_bairro_av[base.noites_mínimas <= 4]

#e também excluindo os hoteis que não permitem estadias menores que 4
base_NoitesAdequadas = base_NoitesMinimas[base_NoitesMinimas.noites_máximas >= 4]

print("Entradas depois da limpeza " + str(sem_bairro_av.shape[0]))
print("Entradas antes da limpeza " + str(base_NoitesAdequadas.shape[0]))

"""## Filtrar Fumantes
Filtrando os registros, onde a coluna "Facilidades" possui o item "Smoking Allowed", já que o cliente é fumante 
"""

#filtrando o dataframe anterior(dataframe com o número de noites adequadas), e procurando pelos registros onde é permitido fumar

baseFumante = base_NoitesAdequadas[base_NoitesAdequadas['facilidades'].str.contains("Smoking allowed", case=False)] 

print("Entradas antes da limpeza " + str(base_NoitesAdequadas.shape[0]))
print("Entradas depois da limpeza " + str(baseFumante.shape[0]))

"""## Filtrando as acomodações que possuem Internet ou Wifi
Visando a necessidade de 1 dia de trabalho do hóspede


"""

baseInternet = baseFumante[baseFumante['facilidades'].str.contains("internet", case=False) | baseFumante['facilidades'].str.contains("wifi", case=False)]  

print("Entradas antes da limpeza " + str(baseFumante.shape[0]))
print("Entradas depois da limpeza " + str(baseInternet.shape[0]))

"""##Filtrando pelos bairros desejados

"""

#Utilizando apenas os bairros próximos das atrações turísticas planejadas
bairros_d = "Copacabana|Ipanema|Botafogo|Leblon|Huma|Lagoa|Gávea|Jardim"

base_desejada = baseInternet[baseInternet['bairro'].str.contains(bairros_d, case=False)]

print("Entradas antes da limpeza " + str(baseInternet.shape[0]))
print("Entradas depois da limpeza " + str(base_desejada.shape[0]))

"""
##Filtragem por preço de acomodação

Tratamento das colunas que serão analizadas na próxima consulta"""

#Colocando valor zero (0) onde a taxa de limpeza não é cobrada
base_desejada['taxa_de_limpeza'].replace(np.nan, 0, inplace=True)

#Retirando os símbolos de $ do DataFrame e transformando o tipo de dado em numérico
base_desejada['preço'].replace(r"[^0-9.]", "", regex=True, inplace=True)
base_desejada['preço'] = pd.to_numeric(base_desejada['preço'])

base_desejada['taxa_de_limpeza'].replace(r"[^0-9.]", "", regex=True, inplace=True)
base_desejada['taxa_de_limpeza'] = pd.to_numeric(base_desejada['taxa_de_limpeza'])

"""Buscando as acomodações de acordo com o valor esperado para as quatro noites

**R$525,00**
"""

"""
Aqui podemos colocar qual o valor que desejamos gastar em acomodação e receberemos
apenas aqueles locais que podemos pagar
"""

valor_alvo = 525
 
pode_pagar = base_desejada[ ( (base_desejada['preço'] * 4) + base_desejada['taxa_de_limpeza'] ) < valor_alvo]
 
print("Entradas antes da limpeza " + str(base_desejada.shape[0]))
print("Entradas depois da limpeza " + str(pode_pagar.shape[0])+"\n")

bds_df = pd.DataFrame(columns=["Nome","Entradas"], data={"Nome": ["depois","antes"] ,"Entradas":[pode_pagar.shape[0],base_desejada.shape[0]] })
bds_df.set_index("Nome").plot.barh()

"""##Encontrando melhores locais
Agora que já temos os locais que possuem as características e preço que desejamos, vamos diminuir as entradas de acordo com as notas mais altas em relação a avaliação geral e se o Host é um Superhost (manda bem no atendimento)
"""

#Verificando se a Avaliação Geral é maior que 90 e se é um Superhost

melhores_notas = pode_pagar[(pode_pagar["avaliação_geral"] > 90) & (pode_pagar["superhost"].str.contains("t"))]

print("Entradas antes da limpeza " + str(pode_pagar.shape[0]))
print("Entradas depois da limpeza " + str(melhores_notas.shape[0]))

"""##Visualizando quantas opções possuímos por bairro"""

print(melhores_notas['bairro'].value_counts())
print(f"\nTotal de entradas válidas: {melhores_notas.shape[0]}\n") 
melhores_notas['bairro'].value_counts().plot(kind='pie', title = 'Oferta de locais de acordo com o bairro', figsize = (8, 8))

"""##Escolha do bairro e acomodação
Fica claro que teremos mais chances de encontrar o local ideal em Copacabana ou Botafogo, pois possuem mais opções

###Alugando um local inteiro
Para dar mais privacidade ao cliente
"""

apartamento_inteiro = melhores_notas[melhores_notas["tipo_de_quarto"].str.contains("ent", case=False)]
print("Total de locais inteiros para locação: ", apartamento_inteiro.shape[0])
apartamento_inteiro[['id', 'link_da_acomodacão','nome', 'bairro', 'preço', 'taxa_de_limpeza', 'avaliação_geral', 'tipo_de_propriedade' ]]

"""Bairro| Total com transporte | Ingressos | Acomodação | **Valor Total do Pacote**
-|-|-|-|-
Botafogo|153.00|307.00|525.00|**985.00**
Copacabana|180.60|307.00|525.00|**997.00**




"""